# -*- coding: utf-8 -*-
"""houseprices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1opvKRzi17Nwfm4NgIjcADcCmvq-Yy8b2
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("greenwing1985/housepricing")

print("Path to dataset files:", path)

# prompt: ler em dataframe os dados

import os
import pandas as pd

# Assuming the downloaded files are CSV and you want to read the first one found
# You might need to adjust the file name or pattern based on the actual downloaded files
csv_files = [f for f in os.listdir(path) if f.endswith('.csv')]

if csv_files:
    # Read the first CSV file found into a DataFrame
    df = pd.read_csv(os.path.join(path, csv_files[0]))
    print(df.head())
else:
    print("No CSV files found in the downloaded dataset directory.")

df.head()

# prompt: # prompt: Usando o DataFrame df: gerar mapa de correlação para prices

import seaborn as sns
import matplotlib.pyplot as plt

# Calculate the correlation matrix
corr_matrix = df.corr()

# Generate a heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of House Pricing Data')
plt.show()

# Generate a heatmap specifically for the 'prices' column correlation
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix[['prices']].sort_values(by='prices', ascending=False), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation with Prices')
plt.show()

# prompt: gerar modelo de regressão linear  para prices

import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Select features (X) and target (y)
# For a simple linear regression, we'll use 'Area' as the feature
X = df[['Area']]
y = df['Prices']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

# Print the model coefficients
print(f"Intercept: {model.intercept_}")
print(f"Coefficient for Area: {model.coef_[0]}")

# Plot the regression line
plt.scatter(X_test, y_test, color='black', label='Actual Prices')
plt.plot(X_test, y_pred, color='blue', linewidth=3, label='Predicted Prices')
plt.xlabel('Area')
plt.ylabel('Prices')
plt.title('Linear Regression: Area vs Prices')
plt.legend()
plt.show()